head	1.2;
access;
symbols;
locks
	leavens:1.2; strict;
comment	@# @;


1.2
date	2013.10.23.13.37.23;	author leavens;	state Exp;
branches;
next	1.1;

1.1
date	2013.10.23.01.49.10;	author leavens;	state Exp;
branches;
next	;


desc
@@


1.2
log
@better
@
text
@-- $Id: PQSortRun4.hs,v 1.1 2013/10/23 01:49:10 leavens Exp leavens $
module Main where
-- see Makefile for compilation instructions
import Control.Exception (evaluate)
import Control.Parallel.Strategies
import Control.DeepSeq
import QuickSortRunHelpers

-- main creates the input, runs the sort and prints the result,
-- all in the IO monad.
main :: IO ()
main = do is <- input
          print (isOrdered (pqsort is))

pqsort :: (Ord a) => [a] -> [a]
pqsort [] = []
pqsort (x:xs) = 
    let (small,large) = psplit x xs
    in (((pqsort small) `using` rpar)
        ++ (x:(pqsort large) `using` rpar))

psplit :: (Ord a) => a -> [a] -> ([a],[a])
psplit x xs = let small = [e | e <- xs, e <= x]
                  large = [e | e <- xs, e > x]
              in (small `using` rpar, 
                  large `using` rpar)
@


1.1
log
@better
@
text
@d1 1
a1 1
-- $Id: PQSortRun.hs,v 1.1 2013/10/18 13:00:39 leavens Exp leavens $
a14 4
-- The strategy for parallelism used here is rpar/rseq;
-- that is, we spark off one 1/2 of the list (small) to sort, 
-- then sort the other 1/2 (large) in the current thread.
-- This makes sense assuming that small and large are roughly the same size.
@

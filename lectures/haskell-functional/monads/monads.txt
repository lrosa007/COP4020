Lecture -*- Outline -*-

* Monads 

This is based on

- Chapter 18 of "Haskell - the craft of functional programming"

- https://en.wikibooks.org/wiki/Haskell/do_notation

---------------------------------------------------------

* Monads, formally

A monad is a family of types m a, based on a polymorphic type
constructor m, with functions return, (>>=), (>>), and fail.
(execute :info Monad)

class Monad m where

  (>>=)  :: m a -> (a -> m b) -> m b
  return :: a -> m a

  (>>)   :: m a -> m b -> m b
  fail   :: String -> m a

We can also use do blocks with monads.

---------------------------------------------------------

* IO monad 

To keep things simple at the beginning, we start with IO, 
which is an instance of Monad (execute :info IO)

We have seen that the type IO comes with various functions such as

putStr  :: String -> IO ()
getLine :: IO String 

For instance, these functions can be sequenced to read in
a line from the keyboard and to echo it on the screen.

See echoLine.hs

---------------------------------------------------------

* (>>) 

do
  action1
  action2
  action3

The above do block is (approximately) equivalent to

action1 >>
  action2 >>
    action3

See Example1.hs

---------------------------------------------------------

* Bind (>>=)

The bind operator (>>=) passes a value, namely the result of an action, 
to the actions downstream in the sequence. 

The do notation assigns a variable name to the passed value using <-.

do x1 <- action1
   x2 <- action2
   action3 x1 x2

The above do block is (approximately) equivalent to

action1 >>= \ x1 ->
  action2 >>= \ x2 ->
    action3 x1 x2

To see the scope of each lambda more clearly, we can regroup 

action1
  >>=
    \ x1 -> action2
      >>=
        \ x2 -> action3 x1 x2

See Example2.hs

---------------------------------------------------------

* (>>) and (>>=)

See Example3.hs

---------------------------------------------------------

* Resemblance to imparative languages   

The sequences of instructions in the above examples 
nearly match those in any imperative language. 

In the IO monad, we can chain actions such as 
writing to a file, opening a network connection, or 
asking the user for input.

---------------------------------------------------------

* Bind (>>=)

(>>=) :: IO a -> (a -> IO b) -> IO b

What is the effect of this operation? 

It combines an IO a

        | IO | a >

with a function of type a -> IO b,

        > a | IO | b >

We can join them together 

        | IO | a > > a | IO | b >

and obtain an IO b

        | IO | > > | IO | b >

---------------------------------------------------------

* (>>=) in terms of do

The bind operation, (>>=) is one of the simplest possible
things we can define using do:

See Bind.hs

---------------------------------------------------------

* The fail method

The translation between the do blocks and the code portions 
with lambdas in the above examples was only approximate.

This is because the do notation adds special handling of 
pattern match failures. 

Assume that action1 returns a Maybe Integer

do Just x1 <- action1
   x2      <- action2
   action3 x1 x2

What happens if action1 returns Nothing? 

Ordinarily, the program would crash with an non-exhaustive 
patterns error. 

With do notation, however, failures are handled with 
the fail method for the relevant monad. 

The do block above translates to:

action1 >>= f
where f (Just x1) = do x2 <- action2
                       action3 x1 x2
      f _         = fail "..." -- A compiler-generated message.

What fail actually does depends on the monad instance. 

---------------------------------------------------------

* Return 

The return function is of type a -> IO a

getReversedLine :: IO String
getReversedLine =
  do
    line <- getLine
    return (reverse line)

---------------------------------------------------------

* Monads: languages for functional programming

The do notation allows us to write programs which perform
IO while calculating results.

All we need to support the do notation is to have the
'bind' and 'return' functions:

(>>=)  :: IO a -> (a -> IO b) -> IO b
return :: a -> IO a

The IO types give one kind of programs which we can describe with
the do notation.  

There are other kinds of programs we might want to write in a
similar way, such as:

a) programs that are non-deterministic: we can think of these as
  programs which return a collection of results, as a list, say;

b) programs that might fail to give any answer at all;

c) programs that work by manipulating a state: that is
  programs that have variables in the sense of imperative
  programming languages like Java and C.

... many more examples

------------------------------------------

* a) [] monad

instance Monad [] where
  xs >>= f = concat (map f xs)
  return x = [x]

The three code lines

  [1,2] >>= \x -> [3,4] >>= \y -> [(x,y)]

  concat (map (\x -> concat (map (\y -> [(x,y)]) [3,4])) [1,2])

  do { x <- [1,2]; y <- [3,4]; return (x,y) }

all produce

  [(1,3),(1,4),(2,3),(2,4)]

------------------------------------------

* b) Maybe monad 

data Maybe a = Nothing | Just a

instance Monad Maybe where
  (Just x) >>= k = k x
  Nothing  >>= k = Nothing 
  return x       = Just x

test1 = do { x <- Just 1;  y <- Just 2;  return (x+y) }
test2 = do { x <- Just 1;  y <- Nothing; return (x+y) }
test3 = do { x <- Nothing; y <- Just 2;  return (x+y) }

test4 = (Just 1) >>= \x -> 
          (Just 2) >>= \y -> 
            (Just (x+y)) 

test5 = Nothing >>= \x -> 
          (Just 2) >>= \y -> 
            (Just (x+y)) 

test6 = (Just 1) >>= \x -> 
          Nothing >>= \y -> 
            (Just (x+y)) 

------------------------------------------

* c) State monad

We will give later an example of a state monad,
State a b.

An operation of this type can change the state (of type a)
before returning a value of type b.

------------------------------------------

* The identity monad

See IdentityMonad.hs

newtype IdM a = IdM a

instance Monad IdM where
  (IdM x) >>= f = f x        -- x >>= f = f x
  return a           = IdM a -- return = id

instance Show a => Show (IdM a) where
  show (IdM x) = show x

------------------------------------------

* Summing a tree of integers

See MonadicTreeSum.hs

------------------------------------------

* Using a state monad in a tree calculation

We want to define a function 

  numTree :: Eq a => Tree a -> Tree Integer

so that given an arbitrary tree we transform it into
a tree of integers in which the original elements are
replaced by natural numbers, starting from 0.

The same element has to be replaced by the same number
at every occurrence, and when we meet an as-yet-unvisited
element we have to find a 'new' number to match it with.

------------------------------------------

* Describing the computation

numberTree :: Eq a => Tree a -> State a (Tree Integer)

TO DO: add more explanations

See State.hs (state monad)

See MonadicTreeNumbering.hs

------------------------------------------

* Parsing monad

TO DO !!!

------------------------------------------

* The monad trap

class Monad m where
    return :: a -> m a
    (>>=)  :: m a -> (a -> m b) -> m b
    (>>)   :: m a -> m b -> m b
    fail   :: String -> m a

Do the operations of the class Monad 
allow us to write a function of type

     m a -> a   ?

No! none of them get us out of the Monad!

Once you head down the "do" rabbit hole, there is no escape.
See HidingEffects.hs

Q: Can one write a function of type IO Int -> Int  ?

No! (Not unless the IO type has some operation like that, 
     but it doesn't!)

Thus, IO t has to show up in the type of each expression where I/O
may happen, preserving referential transparency.
This helps reasoning.

------------------------------------------

* Example (from previous semesters)
   
See Hailstone.lhs and HailstonePeaks.lhs

Lecture -*- Outline -*-
------------------------------------------

* Closures and Functions (Thompson 9 and 10, Davie 5)

------------------------------------------

* \ makes functions

This is called and 

- lambda in Scheme and Lisp
- fn in SML
- a block in Smalltalk and Ruby

Used for avoiding redundancy in code (functional abstraction)
and for building tools

------------------------------------------

* \ makes functions (closures)

Prelude> (\ x -> x) "y"

Prelude> ((\ x -> head x) [1,2,3])

Prelude> ((\ (x,y) -> 0) (head [], "hmm"))

Prelude> (\ () -> 5)

Prelude> (\ () -> 5)()

Notes:

- the function (\ x -> head x) is the same as head

- the \ extends as far to right as possible
  so best to use parens around it

------------------------------------------

* Curried functions

> cadd = \x -> \y -> x + y
> add2 = (cadd 2)

Prelude> :type cadd
cadd :: Integer -> Integer -> Integer
Prelude> :type add2
add2 :: Integer -> Integer
 
Functions are "automatically" curried in Haskell,
since the definition

  cadd x y = x + y

is equivalent to the one given above

One use of curried functions is as "partial application" as shown by
the function "add2".  This prevents writing 2 redundantly in code...

But the point is we can use cadd to make lots of tools,
add3, add4, add5, etc. all *at run-time*, we don't
have to write a (redundant) separate definition for each.

Show example with curried subtraction.

------------------------------------------

* Closure in C++ and Java

A closure is: environment (values for free vars) + code

What in C++ or Java is like a closure?

An object: it has a little environment (data members)
and code (member functions)

But in C++, don't have anonymous classes,
and can't capture the environment at run-time without
preparing with class definition ahead of time.

------------------------------------------

* Abstracting a common pattern ==> Folding

> sum :: Num a => [a] -> a
> sum [] = 0
> sum (x:xs) = x + sum xs

> product :: Num a => [a] -> a
> product [] = 1
> product (x:xs) = x * product xs

------------------------------------------

* The function foldr1

>foldr1 :: (a -> a -> a) -> [a] -> a

The definition of foldr1 has two cases:

>foldr1 f [x]    = x

>foldr1 f (x:xs) = f x (foldr1 f xs)

The first argument is a binary function
over type a.

For example, the function (+) over Int.

The second argument is a list of elements
of type a that are to be combined using 
the operator.

For instance, [3, 98, 1] 

------------------------------------------

* Examples of foldr1

>foldr1 (+) [3,98,1] == 102
>foldr1 (||) [False,True,False] == True
>foldr1 (++) ["Freak ", "Out", " ", "!"] == "Freak Out!"
>foldr1 min [6] == 6
>foldr1 (*) [1..6] == 720

------------------------------------------

* The function foldr

The function foldr1 gives an error when applied
to an empty list argument.

We can modify the definition to give an extra argument
that is the value returned on the empty list, so 
giving a function defined on all finite lists.

>foldr :: (a  ->  a  ->  a)  ->  a  ->  [a]  ->  a
                  ^              ^       ^       ^
                  |              |       |       |
                binary           |       |       |
                operation        |       |     result
                              starting   |
                              value      |
                                       list of 
                                       values to
 
                                      be combined
>foldr f s [] = s
>foldr f s (x:xs) = f x (foldr f s xs)

Alternative definition using infix notation

> foldr :: (a -> b -> b) -> b -> [a] -> b
> foldr op s []      = s
> foldr op s (x:xs)  = x `op` (foldr op s xs)

------------------------------------------

* Example of functions defined with foldr

We can now define some of the standard functions of Haskell.

concat :: [[a]] -> [a]
concat xs = foldr (++) [] xs

and :: [Bool] -> Bool
and bs = foldr (&&) True bs

------------------------------------------

* foldr1 in terms of fold

foldr1 is designed to take a list with at least
one element.  We can also define foldr1
from foldr, like this

foldr1 f xs = foldr f (last xs) (init xs)

where last gives the last element of a list,
and init removes that element.

------------------------------------------

* Folding in general - foldr again

The most general type of foldr is defined as
follows:

foldr :: (a -> b -> b) -> b -> [a] -> b

------------------------------------------

* Examples of functions defined with foldr

reverse a list

rev :: [a] -> a
rev xs = foldr snoc [] xs

snoc :: a -> [a] -> [a]
snoc x xs = xs ++ [x]

------------------------------------------

* For you to do

Problems:

- Implement the function ins that is used
  in iSort (insertion sort).  What is its type?
  
  iSort :: [Integer] -> [Integer]
  iSort xs = foldr ins [] xs

- Implement iSort' that uses left fold instead
  of a right fold 

see ISort.hs

------------------------------------------

* Diagrams representing right and left folds

The presentation is based on https://wiki.haskell.org/Fold

  :
 / \
1   :
   / \
  2   :
     / \
    3   :
       / \
      4   :
         / \
        5   []

foldr f z produces 

  f
 / \
1   f
   / \
  2   f            f 1 (f 2 (f 3 (f 4 (f 5 z)))))
     / \
    3   f
       / \
      4   f
         / \
        5   z


foldl f z produces

          f
         / \
        f   5
       / \
      f   4        f (f (f (f (f z 1) 2) 3) 4) 5
     / \  
    f   3
   / \
  f   2
 / \
z   1

------------------------------------------

* List folds as structural transformations

One way in which it is perhaps natural to view folds is as a mechanism 
for replacing the structural components of a data structure with other 
functions and values in some regular way. 

In many languages, lists are built up from two primitives: 
- either the list is the empty list, commonly called nil, 
- or it is a list constructed by appending an element to the start of 
  some other list, which we call a cons. 

In Haskell, the cons operation is written as a colon (:), 
and in scheme and other lisps, it is called cons. 

  :
 / \
1   :
   / \
  2   :
     / \
    3   :
       / \
      4   :
         / \
        5   []

------------------------------------------

* Right fold

One can view a right fold as replacing the nil at the end of the list 
with a specific value, and each cons with a specific other function. 
Hence, one gets a diagram which looks something like this: 

  f
 / \
1   f
   / \
  2   f            f 1 (f 2 (f 3 (f 4 (f 5 x)))))
     / \
    3   f
       / \
      4   f
         / \
        5   z

------------------------------------------

* Left fold

In the case of a left fold, the structural transformation being 
performed is somewhat less natural, but is still quite regular: 

          f
         / \
        f   5
       / \
      f   4        f (f (f (f (f z 1) 2) 3) 4) 5
     / \  
    f   3
   / \
  f   2
 / \
z   1

------------------------------------------

* Showing folds

The module ShowFolds defines the function

  showFold fold n =
    fold (\x y -> concat ["(",x,"+",y,")"]) "0" (map show [1..n])

Using the Haskell interpreter, we can show the structural
transformation that is performed by foldr and foldl:

ShowFolds> showFold foldr 5
"(1+(2+(3+(4+(5+0)))))"

ShowFolds> showFold foldl 5
"(((((0+1)+2)+3)+4)+5)"

------------------------------------------
 
* Comparision of right and left folds - I

Here is again the definition of foldr and foldl:

foldr :: (a -> b -> b) -> b -> [a] -> b

foldr f s []     = s 
foldr f s (x:xs) = f x (foldr f s xs) 
 
foldl :: (a -> b -> a) -> a -> [b] -> a

foldl f s []     = s                  
foldl f s (x:xs) = foldl f (f s x) xs

In the presence of lazy, or normal-order evaluation, foldr  
immediately returns the application of f to the recursive case of 
folding over the rest of the list. 

If f is able to produce some part of its result without reference to 
the recursive case, and the rest of the result is never demanded, 
then the recursion will stop.  This allows right folds to operate on 
infinite lists.

By contrast, foldl will immediately call itself with new parameters 
until it reaches the end of the list.  This tail recursion can be 
efficiently compiled as a loop, but can't deal with infinite lists 
at all. It will recurse forever in an infinite loop. 

See MinMaxFold.hs for an example showing that foldr1 can
operate on infinite lists.

------------------------------------------

* Comparison of right and left folds - II

Another technical point to be aware of in the case of left folds in 
a normal-order evaluation language is that the new initial parameter 
is not being evaluated before the recursive call is made. 

This can lead to stack overflows when one reaches the end of the list and 
tries to evaluate the resulting gigantic expression. For this reason, 
such languages often provide a stricter variant of left folding 
which forces the evaluation of the initial parameter before making 
the recursive call. 

In Haskell, this is the foldl' (note the apostrophe) function in the 
Data.List library. 

Combined with the speed of tail recursion, such folds are very efficient 
when lazy evaluation of the final result is impossible or undesirable. 

------------------------------------------

* Comparison of right and left folds - III

The above diagrams motivate the names left and right fold visually. 

It also makes obvious the fact that 

  foldr (:) [] 

is the identity function on lists, as replacing cons with cons and nil 
with nil will not change anything. 

The left fold diagram suggests an easy way to reverse a list, 

  foldl (flip (:)) []

Note that the parameters to cons must be flipped, because the element to
add is now the right hand parameter of the combining function. 

Another easy result to see from this vantage-point is to write 
the higher-order map function in terms of foldr, by composing 
the function to act on the elements with cons, as:

 map f = foldr ((:) . f) []

where the period (.) is an operator denoting function composition. 

------------------------------------------

* Abstraction on a different data type

This way of looking at things provides a simple route to designing 
fold-like functions on other algebraic data structures, like various 
sorts of trees. 

https://wiki.haskell.org/Algebraic_data_type

One writes a function which recursively replaces the constructors of 
the datatype with provided functions, and any constant values of 
the type with provided values. 

------------------------------------------

* Generalized fold

> data Tree a =   Lf
>               | Br (a, Tree a, Tree a)
>                   deriving (Eq, Show)

Generalize:

> preorder :: Tree a -> [a]
> preorder Lf = []
> preorder (Br(v,t1,t2)) =
>    [v] ++ preorder t1 ++ preorder t2

> inc :: Num a => Tree a -> Tree a
> inc Lf = Lf
> inc (Br(v,t1,t2)) =
>    Br(v + fromInteger 1, inc t1, inc t2)

see TreeFold.hs

------------------------------------------
